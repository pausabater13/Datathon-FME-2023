import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import random



# DataFrame de prendas
datos_prendas = pd.DataFrame({
    'prenda_id': [1, 2, 3, 4, 5, 6, 7, 8],
    'color': ['Rojo', 'Azul', 'Verde', 'Negro', 'Blanco', 'Gris', 'Amarillo', 'Rosa'],
    'genero': ['Hombre', 'Mujer', 'Unisex', 'Hombre', 'Mujer', 'Unisex', 'Hombre', 'Mujer'],
    'edad': ['Adulto', 'Joven', 'Adulto', 'Joven', 'Adulto', 'Joven', 'Adulto', 'Joven']
})

# DataFrame de outfits
datos_outfits = pd.DataFrame({
    'outfit_id': range(0, 15),
    'prenda_ids': [
        [1, 2, 4], [2, 3, 5], [1, 3, 6], [4, 5, 7], [3, 6, 8],
        [1, 2, 5], [2, 4, 7], [3, 5, 8], [1, 4, 6], [2, 5, 8],
        [1, 3, 7], [4, 6, 8], [2, 3, 6], [1, 5, 7], [3, 4, 8]
    ],
    'combinacion_exitosa': [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
})

# Imprimir los DataFrames
print("Datos de Prendas:")
print(datos_prendas)

print("\nDatos de Outfits:")
print(datos_outfits)


# Expandir la lista en 'prenda_ids'
datos_outfits_expandidos = datos_outfits.explode('prenda_ids')

# Convertir 'prenda_ids' a tipo entero
datos_outfits_expandidos['prenda_ids'] = datos_outfits_expandidos['prenda_ids'].astype(int)

# Realizar la fusión
datos_combinados = pd.merge(datos_outfits_expandidos, datos_prendas, left_on='prenda_ids', right_on='prenda_id', how='inner')


# Separar características (X) y etiquetas (y)
X = datos_combinados[['color', 'genero', 'edad']]
y = datos_combinados['combinacion_exitosa']

# Codificación one-hot para variables categóricas
X = pd.get_dummies(X)

# Normalizar las características
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Construir el modelo
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compilar el modelo
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Entrenar el modelo

# Entrenar el modelo
# ... (código anterior)

#

# Entrenar el modelo
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Evaluar el rendimiento del modelo en el conjunto de prueba
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Accuracy: {accuracy:.2f}')

# Predecir las etiquetas para el conjunto de prueba
predicciones = model.predict(X_test)

# Imprimir outfits y predicciones
outfits_predichos = pd.DataFrame({
    'outfit_id': range(len(X_test)),  # Crear un rango de índices
    'prediccion': predicciones.flatten()
})

print("Outfits y sus predicciones:")
print(outfits_predichos)

# ... (código anterior)

# Predecir las etiquetas binarias para el conjunto de prueba
umbral = 0.5


# Filtrar los outfits predichos como exitosos
outfits_exitosos = outfits_predichos[outfits_predichos['prediccion'] > umbral]

# Inicializar listas para almacenar los datos
outfit_ids = []
prenda_ids = []
predicciones = []

# Iterar sobre los outfits exitosos y extraer información
for index, row in outfits_exitosos.iterrows():
    outfit_id = row['outfit_id']
    prenda_ids_outfit = datos_outfits_expandidos.loc[row['outfit_id'], 'prenda_ids']
    prediccion = row['prediccion']
    
    # Agregar múltiples filas para cada prenda en el outfit
    for prenda_id in prenda_ids_outfit:
        outfit_ids.append(outfit_id)
        prenda_ids.append(prenda_id)
        predicciones.append(prediccion)

# Crear DataFrame con la información recopilada
prendas_exitosas = pd.DataFrame({   
    'outfit_id': outfit_ids,
    'prenda_id': prenda_ids,
    'prediccion': predicciones
})

print("Prendas de los outfits predichos como exitosos:")
print(prendas_exitosas)

